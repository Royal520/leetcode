/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
public:
    vector<vector<int>> levelOrder(Node* root) {
        vector<vector<int>>res;
        if(root== nullptr)return res;
        queue<Node*> pre;
        queue<Node*> next;
        pre.push(root);
        vector<int> temp;
        while (!pre.empty()){
            Node* cur=pre.front();
            pre.pop();
            temp.push_back(cur->val);
            for (const auto &item: cur->children){
                next.push(item);
            }
            if (pre.empty()){
                swap(pre,next);
                res.push_back(temp);
                temp.clear();
            }
        }
        return res;
    }
};

//runtime:0 ms
//memory:15.1 MB
