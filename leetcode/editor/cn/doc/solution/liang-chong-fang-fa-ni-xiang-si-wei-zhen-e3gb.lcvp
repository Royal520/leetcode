## 方法一：逆向思维

拿走 $k$ 张，剩下 $n-k$ 张。这里 $n$ 是 $\textit{cardPoints}$ 的长度。

由于拿走的点数和 + 剩下的点数和 = 所有点数和 = 常数，所以为了最大化拿走的点数和，应当**最小化剩下的点数和**。

由于只能从开头或末尾拿牌，所以最后剩下的牌必然是**连续**的。

至此，问题变成：

- 计算长为 $n-k$ 的连续子数组和的最小值。

这可以用**滑动窗口**解决。

#### 算法

1. 设 $m=n-k$，计算第一个长为 $m$ 的子数组元素和，即 $s = \textit{cardPoints}[0] + \textit{cardPoints}[1] + \cdots + \textit{cardPoints}[m-1]$。初始化 $\textit{minS}=s$。
2. 计算下一个子数组的元素和，即 $s' = \textit{cardPoints}[1] + \textit{cardPoints}[2] + \cdots + \textit{cardPoints}[m]$。由于 $s'-s = \textit{cardPoints}[m]-\textit{cardPoints}[0]$，所以只需要把 $s$ 增加 $\textit{cardPoints}[m]-\textit{cardPoints}[0]$，就可以 $\mathcal{O}(1)$ 算出下一个子数组的元素和。
3. 依照这个方法，从 $i=m$ 开始向后枚举，每次把 $s$ 增加 $\textit{cardPoints}[i]-\textit{cardPoints}[i-m]$，然后用 $s$ 更新 $\textit{minS}$ 的最小值。
4. 最后，用 $\textit{cardPoints}$ 的元素和，减去 $\textit{minS}$，就得到了答案。

* [sol-Python3]

```py
class Solution:
    def maxScore(self, cardPoints: List[int], k: int) -> int:
        n = len(cardPoints)
        m = n - k
        min_s = s = sum(cardPoints[:m])
        for i in range(m, n):
            s += cardPoints[i] - cardPoints[i - m]
            min_s = min(min_s, s)
        return sum(cardPoints) - min_s
```

* [sol-Python3zip]

```py
class Solution:
    def maxScore(self, cardPoints: List[int], k: int) -> int:
        m = len(cardPoints) - k
        min_s = s = sum(cardPoints[:m])
        for in_, out in zip(cardPoints[m:], cardPoints):
            s += in_ - out
            min_s = min(min_s, s)
        return sum(cardPoints) - min_s
```

* [sol-Java]

```java
class Solution {
    public int maxScore(int[] cardPoints, int k) {
        int n = cardPoints.length;
        int m = n - k;
        int s = 0;
        for (int i = 0; i < m; i++) {
            s += cardPoints[i];
        }
        int total = s;
        int minS = s;
        for (int i = m; i < n; i++) {
            total += cardPoints[i];
            s += cardPoints[i] - cardPoints[i - m];
            minS = Math.min(minS, s);
        }
        return total - minS;
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    int maxScore(vector<int> &cardPoints, int k) {
        int n = cardPoints.size();
        int m = n - k;
        int s = accumulate(cardPoints.begin(), cardPoints.begin() + m, 0);
        int min_s = s;
        for (int i = m; i < n; i++) {
            s += cardPoints[i] - cardPoints[i - m];
            min_s = min(min_s, s);
        }
        return accumulate(cardPoints.begin(), cardPoints.end(), 0) - min_s;
    }
};
```

* [sol-Go]

```go
func maxScore(cardPoints []int, k int) int {
    n := len(cardPoints)
    m := n - k
    s := 0
    for _, x := range cardPoints[:m] {
        s += x
    }
    total := s
    minS := s
    for i := m; i < n; i++ {
        total += cardPoints[i]
        s += cardPoints[i] - cardPoints[i-m]
        minS = min(minS, s)
    }
    return total - minS
}
```

* [sol-JavaScript]

```js
var maxScore = function (cardPoints, k) {
    const n = cardPoints.length;
    const m = n - k;
    let s = 0;
    for (let i = 0; i < m; i++) {
        s += cardPoints[i];
    }
    let total = s;
    let minS = s;
    for (let i = m; i < n; i++) {
        total += cardPoints[i];
        s += cardPoints[i] - cardPoints[i - m];
        minS = Math.min(minS, s);
    }
    return total - minS;
};
```

* [sol-Rust]

```rust
impl Solution {
    pub fn max_score(card_points: Vec<i32>, k: i32) -> i32 {
        let n = card_points.len();
        let m = n - k as usize;
        let mut s = card_points.iter().take(m).sum::<i32>();
        let mut min_s = s;
        for i in m..n {
            s += card_points[i] - card_points[i - m];
            min_s = min_s.min(s);
        }
        card_points.iter().sum::<i32>() - min_s
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n)$，其中 $n$ 为 $\textit{cardPoints}$ 的长度。
- 空间复杂度：$\mathcal{O}(1)$。仅用到若干额外变量。Python 忽略切片开销。

## 方法二：正向思维

答案等于如下结果的最大值：

- 前 $k$ 个数的和。
- 前 $k-1$ 个数以及后 $1$ 个数的和。
- 前 $k-2$ 个数以及后 $2$ 个数的和。
- ……
- 前 $2$ 个数以及后 $k-2$ 个数的和。
- 前 $1$ 个数以及后 $k-1$ 个数的和。
- 后 $k$ 个数的和。

#### 算法

1. 计算前 $k$ 个数的和，记作 $s$。初始化答案 $\textit{ans}=s$。
2. 从 $i=1$ 开始枚举到 $i=k$。
3. 每次枚举，把 $s$ 增加 $\textit{cardPoints}[n-i] - \textit{cardPoints}[k-i]$，然后更新 $\textit{ans}$ 的最大值。
4. 返回 $\textit{ans}$。

* [sol-Python3]

```py
class Solution:
    def maxScore(self, cardPoints: List[int], k: int) -> int:
        ans = s = sum(cardPoints[:k])
        for i in range(1, k + 1):
            s += cardPoints[-i] - cardPoints[k - i]
            ans = max(ans, s)
        return ans
```

* [sol-Python3zip]

```py
class Solution:
    def maxScore(self, cardPoints: List[int], k: int) -> int:
        ans = s = sum(cardPoints[-k:])  # 为方便下面 zip，改为先计算后 k 个数的和
        for x, y in zip(cardPoints, cardPoints[-k:]):
            s += x - y
            ans = max(ans, s)
        return ans
```

* [sol-Java]

```java
class Solution {
    public int maxScore(int[] cardPoints, int k) {
        int s = 0;
        for (int i = 0; i < k; i++) {
            s += cardPoints[i];
        }
        int ans = s;
        for (int i = 1; i <= k; i++) {
            s += cardPoints[cardPoints.length - i] - cardPoints[k - i];
            ans = Math.max(ans, s);
        }
        return ans;
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    int maxScore(vector<int> &cardPoints, int k) {
        int s = accumulate(cardPoints.begin(), cardPoints.begin() + k, 0);
        int ans = s;
        for (int i = 1; i <= k; i++) {
            s += cardPoints[cardPoints.size() - i] - cardPoints[k - i];
            ans = max(ans, s);
        }
        return ans;
    }
};
```

* [sol-Go]

```go
func maxScore(cardPoints []int, k int) int {
    s := 0
    for _, x := range cardPoints[:k] {
        s += x
    }
    ans := s
    for i := 1; i <= k; i++ {
        s += cardPoints[len(cardPoints)-i] - cardPoints[k-i]
        ans = max(ans, s)
    }
    return ans
}
```

* [sol-JavaScript]

```js
var maxScore = function (cardPoints, k) {
    let s = 0;
    for (let i = 0; i < k; i++) {
        s += cardPoints[i];
    }
    let ans = s;
    for (let i = 1; i <= k; i++) {
        s += cardPoints[cardPoints.length - i] - cardPoints[k - i];
        ans = Math.max(ans, s);
    }
    return ans;
};
```

* [sol-Rust]

```rust
impl Solution {
    pub fn max_score(card_points: Vec<i32>, k: i32) -> i32 {
        let k = k as usize;
        let mut s = card_points.iter().take(k).sum::<i32>();
        let mut ans = s;
        for i in 1..=k {
            s += card_points[card_points.len() - i] - card_points[k - i];
            ans = ans.max(s);
        }
        ans
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(k)$。
- 空间复杂度：$\mathcal{O}(1)$。仅用到若干额外变量。Python 忽略切片开销。

## 思考题

把题目改成：拿走的卡牌数量无限制，但是 $\textit{cardPoints}$ 中有负数。如何求出可以获得的最大点数和？

欢迎在评论区分享你的思路。

## 题单：定长滑动窗口（右边数字为难度分）

- [1456. 定长子串中元音的最大数目](https://leetcode.cn/problems/maximum-number-of-vowels-in-a-substring-of-given-length/) 1263
- [2269. 找到一个数字的 K 美丽值](https://leetcode.cn/problems/find-the-k-beauty-of-a-number/) 1280
- [1984. 学生分数的最小差值](https://leetcode.cn/problems/minimum-difference-between-highest-and-lowest-of-k-scores/) 1306
- [643. 子数组最大平均数 I](https://leetcode.cn/problems/maximum-average-subarray-i/)
- [1343. 大小为 K 且平均值大于等于阈值的子数组数目](https://leetcode.cn/problems/number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold/) 1317
- [2090. 半径为 k 的子数组平均值](https://leetcode.cn/problems/k-radius-subarray-averages/) 1358
- [2379. 得到 K 个黑块的最少涂色次数](https://leetcode.cn/problems/minimum-recolors-to-get-k-consecutive-black-blocks/) 1360
- [1052. 爱生气的书店老板](https://leetcode.cn/problems/grumpy-bookstore-owner/) 1418
- [2841. 几乎唯一子数组的最大和](https://leetcode.cn/problems/maximum-sum-of-almost-unique-subarray/) 1546
- [2461. 长度为 K 子数组中的最大和](https://leetcode.cn/problems/maximum-sum-of-distinct-subarrays-with-length-k/) 1553
- [1423. 可获得的最大点数](https://leetcode.cn/problems/maximum-points-you-can-obtain-from-cards/) 1574
- [2134. 最少交换次数来组合所有的 1 II](https://leetcode.cn/problems/minimum-swaps-to-group-all-1s-together-ii/) 1748
- [2653. 滑动子数组的美丽值](https://leetcode.cn/problems/sliding-subarray-beauty/) 1786
- [567. 字符串的排列](https://leetcode.cn/problems/permutation-in-string/)
- [438. 找到字符串中所有字母异位词](https://leetcode.cn/problems/find-all-anagrams-in-a-string/)
- [2156. 查找给定哈希值的子串](https://leetcode.cn/problems/find-substring-with-given-hash-value/) 2063
- [346. 数据流中的移动平均值](https://leetcode.cn/problems/moving-average-from-data-stream/)（会员题）
- [1100. 长度为 K 的无重复字符子串](https://leetcode.cn/problems/find-k-length-substrings-with-no-repeated-characters/)（会员题）
- [1852. 每个子数组的数字种类数](https://leetcode.cn/problems/distinct-numbers-in-each-subarray/)（会员题）

欢迎关注 [B站@灵茶山艾府](https://space.bilibili.com/206214)

更多精彩题解，请看 [往期题解精选（已分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)
